/*
* 12/12/99		Initial version. Adapted from javalayer.java
*				and Subband*.java. mdm@techie.com
/*-----------------------------------------------------------------------
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software
*  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*----------------------------------------------------------------------
*/

/// <summary>*******************************************************************
/// date   programmers         comment                               *
/// *
/// 29/05/01  Michael Scheerer,  Fixed some C++ to Java porting bugs.  *  
/// *
/// *
/// 16/07/01  Michael Scheerer, Catched a bug in method                *
/// read_sampledata, which causes an outOfIndexException.    *
/// *
/// *********************************************************************
/// *
/// ********************************************************************
/// </summary>

namespace javazoom.jl.decoder
{
    /// <summary>
    ///     Implements decoding of MPEG Audio Layer II frames.
    /// </summary>
    public class LayerIIDecoder : LayerIDecoder, IFrameDecoder
    {
        #region Methods

        protected internal override void CreateSubbands()
        {
            int i;
            if (this.mode == Header.SingleChannel)
            {
                for (i = 0; i < this.num_subbands; ++i)
                {
                    this.subbands[i] = new SubbandLayer2(i);
                }
            }
            else if (this.mode == Header.JointStereo)
            {
                for (i = 0; i < this.header.IntensityStereoBound(); ++i)
                {
                    this.subbands[i] = new SubbandLayer2Stereo(i);
                }
                for (; i < this.num_subbands; ++i)
                {
                    this.subbands[i] = new SubbandLayer2IntensityStereo(i);
                }
            }
            else
            {
                for (i = 0; i < this.num_subbands; ++i)
                {
                    this.subbands[i] = new SubbandLayer2Stereo(i);
                }
            }
        }

        protected internal override void ReadScaleFactorSelection()
        {
            for (int i = 0; i < this.num_subbands; ++i)
            {
                ((SubbandLayer2)this.subbands[i]).read_scalefactor_selection(this.stream, this.crc);
            }
        }

        #endregion

        /// <summary>
        ///     Class for layer II subbands in single channel mode.
        /// </summary>
        internal class SubbandLayer2 : Subband
        {
            #region Static Fields

            public static readonly float[] grouping_10bits = new[]
                                                                 {
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f, 0.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, 0.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 4.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, - 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     2.0f / 9.0f, - 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     4.0f / 9.0f, - 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     6.0f / 9.0f, - 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     8.0f / 9.0f, - 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 2.0f / 9.0f, - 8.0f / 9.0f, 0.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f, 0.0f,
                                                                     - 8.0f / 9.0f, - 6.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     0.0f, - 8.0f / 9.0f, 0.0f, 0.0f, - 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 0.0f, - 8.0f / 9.0f, 4.0f / 9.0f, 0.0f,
                                                                     - 8.0f / 9.0f, 6.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     8.0f / 9.0f, 0.0f, - 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     2.0f / 9.0f, - 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     2.0f / 9.0f, - 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     2.0f / 9.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     2.0f / 9.0f, - 8.0f / 9.0f, 0.0f, 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, 6.0f / 9.0f, - 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 6.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 8.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     8.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 0.0f, - 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     2.0f / 9.0f, - 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     4.0f / 9.0f, - 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     6.0f / 9.0f, - 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     8.0f / 9.0f, - 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 6.0f / 9.0f, - 6.0f / 9.0f, 0.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 0.0f, - 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     2.0f / 9.0f, - 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     4.0f / 9.0f, - 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     6.0f / 9.0f, - 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     8.0f / 9.0f, - 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, - 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     0.0f, - 6.0f / 9.0f, - 4.0f / 9.0f, 0.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, 0.0f, - 6.0f / 9.0f,
                                                                     0.0f, 0.0f, - 6.0f / 9.0f, 2.0f / 9.0f, 0.0f,
                                                                     - 6.0f / 9.0f, 4.0f / 9.0f, 0.0f, - 6.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, - 6.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 0.0f, 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     2.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     2.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 0.0f, 4.0f / 9.0f, - 6.0f / 9.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 0.0f, 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     2.0f / 9.0f, 6.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 0.0f, 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     2.0f / 9.0f, 8.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     8.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, - 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     2.0f / 9.0f, - 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     6.0f / 9.0f, - 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     8.0f / 9.0f, - 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 6.0f / 9.0f, - 4.0f / 9.0f, 0.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, - 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     2.0f / 9.0f, - 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     6.0f / 9.0f, - 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     8.0f / 9.0f, - 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, - 4.0f / 9.0f, - 6.0f / 9.0f,
                                                                     0.0f, - 4.0f / 9.0f, - 4.0f / 9.0f, 0.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     0.0f, 0.0f, - 4.0f / 9.0f, 2.0f / 9.0f, 0.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, - 4.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     - 4.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     2.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     2.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     2.0f / 9.0f, 6.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     2.0f / 9.0f, 8.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     8.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 6.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 0.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     2.0f / 9.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     4.0f / 9.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     6.0f / 9.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     8.0f / 9.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, - 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 6.0f / 9.0f, - 2.0f / 9.0f, 0.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, - 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, - 2.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 0.0f, - 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     2.0f / 9.0f, - 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     4.0f / 9.0f, - 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     6.0f / 9.0f, - 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     8.0f / 9.0f, - 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, - 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     0.0f, - 2.0f / 9.0f, - 4.0f / 9.0f, 0.0f,
                                                                     - 2.0f / 9.0f, - 2.0f / 9.0f, 0.0f, - 2.0f / 9.0f,
                                                                     0.0f, 0.0f, - 2.0f / 9.0f, 2.0f / 9.0f, 0.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, 0.0f, - 2.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, - 2.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 0.0f, 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     2.0f / 9.0f, 2.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     2.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 0.0f, 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 0.0f, 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     2.0f / 9.0f, 6.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 0.0f, 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     2.0f / 9.0f, 8.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     8.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, - 8.0f / 9.0f, - 8.0f / 9.0f, 0.0f,
                                                                     - 6.0f / 9.0f, - 8.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, - 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     0.0f, 0.0f, - 8.0f / 9.0f, 0.0f, 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, 4.0f / 9.0f, - 8.0f / 9.0f, 0.0f
                                                                     , 6.0f / 9.0f, - 8.0f / 9.0f, 0.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 0.0f, - 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     0.0f, - 6.0f / 9.0f, - 6.0f / 9.0f, 0.0f,
                                                                     - 4.0f / 9.0f, - 6.0f / 9.0f, 0.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 0.0f, 0.0f, - 6.0f / 9.0f, 0.0f,
                                                                     2.0f / 9.0f, - 6.0f / 9.0f, 0.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 0.0f, 6.0f / 9.0f, - 6.0f / 9.0f, 0.0f
                                                                     , 8.0f / 9.0f, - 6.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, - 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     0.0f, - 4.0f / 9.0f, - 4.0f / 9.0f, 0.0f,
                                                                     - 2.0f / 9.0f, - 4.0f / 9.0f, 0.0f, 0.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 2.0f / 9.0f, - 4.0f / 9.0f, 0.0f
                                                                     , 4.0f / 9.0f, - 4.0f / 9.0f, 0.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 8.0f / 9.0f, - 4.0f / 9.0f, 0.0f
                                                                     , - 8.0f / 9.0f, - 2.0f / 9.0f, 0.0f, - 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 0.0f, - 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     0.0f, - 2.0f / 9.0f, - 2.0f / 9.0f, 0.0f, 0.0f,
                                                                     - 2.0f / 9.0f, 0.0f, 2.0f / 9.0f, - 2.0f / 9.0f, 0.0f
                                                                     , 4.0f / 9.0f, - 2.0f / 9.0f, 0.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 0.0f, 8.0f / 9.0f, - 2.0f / 9.0f, 0.0f
                                                                     , - 8.0f / 9.0f, 0.0f, 0.0f, - 6.0f / 9.0f, 0.0f,
                                                                     0.0f, - 4.0f / 9.0f, 0.0f, 0.0f, - 2.0f / 9.0f, 0.0f,
                                                                     0.0f, 0.0f, 0.0f, 0.0f, 2.0f / 9.0f, 0.0f, 0.0f,
                                                                     4.0f / 9.0f, 0.0f, 0.0f, 6.0f / 9.0f, 0.0f, 0.0f,
                                                                     8.0f / 9.0f, 0.0f, 0.0f, - 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     0.0f, - 6.0f / 9.0f, 2.0f / 9.0f, 0.0f, - 4.0f / 9.0f
                                                                     , 2.0f / 9.0f, 0.0f, - 2.0f / 9.0f, 2.0f / 9.0f, 0.0f
                                                                     , 0.0f, 2.0f / 9.0f, 0.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     0.0f, 4.0f / 9.0f, 2.0f / 9.0f, 0.0f, 6.0f / 9.0f,
                                                                     2.0f / 9.0f, 0.0f, 8.0f / 9.0f, 2.0f / 9.0f, 0.0f,
                                                                     - 8.0f / 9.0f, 4.0f / 9.0f, 0.0f, - 6.0f / 9.0f,
                                                                     4.0f / 9.0f, 0.0f, - 4.0f / 9.0f, 4.0f / 9.0f, 0.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, 0.0f, 0.0f, 4.0f / 9.0f,
                                                                     0.0f, 2.0f / 9.0f, 4.0f / 9.0f, 0.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, 0.0f, 6.0f / 9.0f, 4.0f / 9.0f, 0.0f,
                                                                     8.0f / 9.0f, 4.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 0.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, 0.0f, - 2.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, 0.0f, 6.0f / 9.0f, 0.0f,
                                                                     2.0f / 9.0f, 6.0f / 9.0f, 0.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, 6.0f / 9.0f, 6.0f / 9.0f, 0.0f,
                                                                     8.0f / 9.0f, 6.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     8.0f / 9.0f, 0.0f, - 6.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 0.0f, - 2.0f / 9.0f,
                                                                     8.0f / 9.0f, 0.0f, 0.0f, 8.0f / 9.0f, 0.0f,
                                                                     2.0f / 9.0f, 8.0f / 9.0f, 0.0f, 4.0f / 9.0f,
                                                                     8.0f / 9.0f, 0.0f, 6.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     8.0f / 9.0f, 8.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 2.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     4.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, 0.0f, - 6.0f / 9.0f,
                                                                     2.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     4.0f / 9.0f, - 6.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     2.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     4.0f / 9.0f, - 4.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, 0.0f, - 2.0f / 9.0f,
                                                                     2.0f / 9.0f, 2.0f / 9.0f, - 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     4.0f / 9.0f, - 2.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f, 0.0f,
                                                                     2.0f / 9.0f, - 6.0f / 9.0f, 0.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 2.0f / 9.0f, - 2.0f / 9.0f, 0.0f
                                                                     , 2.0f / 9.0f, 0.0f, 0.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     0.0f, 2.0f / 9.0f, 4.0f / 9.0f, 0.0f, 2.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, 2.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     2.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 0.0f,
                                                                     2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     2.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 0.0f,
                                                                     4.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     2.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f, 0.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     6.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     2.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f, 0.0f,
                                                                     8.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     6.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     8.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 4.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 4.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     4.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 4.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 4.0f / 9.0f, 0.0f, - 6.0f / 9.0f,
                                                                     4.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     4.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 4.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, 0.0f, - 2.0f / 9.0f,
                                                                     4.0f / 9.0f, 2.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 2.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, - 8.0f / 9.0f, 0.0f,
                                                                     4.0f / 9.0f, - 6.0f / 9.0f, 0.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 4.0f / 9.0f, - 2.0f / 9.0f, 0.0f
                                                                     , 4.0f / 9.0f, 0.0f, 0.0f, 4.0f / 9.0f, 2.0f / 9.0f,
                                                                     0.0f, 4.0f / 9.0f, 4.0f / 9.0f, 0.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, 4.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     4.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f, 0.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     4.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 4.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, 4.0f / 9.0f, 0.0f,
                                                                     4.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     4.0f / 9.0f, 4.0f / 9.0f, 4.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, 4.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     4.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, 4.0f / 9.0f, 0.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     4.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, 6.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 4.0f / 9.0f, 0.0f,
                                                                     8.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, 8.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     8.0f / 9.0f, 4.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 6.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     4.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 6.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 6.0f / 9.0f, 0.0f, - 6.0f / 9.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     4.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 6.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     4.0f / 9.0f, - 4.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, 0.0f, - 2.0f / 9.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     4.0f / 9.0f, - 2.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, - 8.0f / 9.0f, 0.0f,
                                                                     6.0f / 9.0f, - 6.0f / 9.0f, 0.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 6.0f / 9.0f, - 2.0f / 9.0f, 0.0f
                                                                     , 6.0f / 9.0f, 0.0f, 0.0f, 6.0f / 9.0f, 2.0f / 9.0f,
                                                                     0.0f, 6.0f / 9.0f, 4.0f / 9.0f, 0.0f, 6.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, 6.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     6.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f, 0.0f,
                                                                     2.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 6.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f, 0.0f,
                                                                     4.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, 6.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     6.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f, 0.0f,
                                                                     6.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f,
                                                                     6.0f / 9.0f, 6.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 6.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f, 0.0f,
                                                                     8.0f / 9.0f, 6.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     6.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     8.0f / 9.0f, 6.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, 0.0f, - 8.0f / 9.0f,
                                                                     8.0f / 9.0f, 2.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 8.0f / 9.0f, 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, 0.0f, - 6.0f / 9.0f,
                                                                     8.0f / 9.0f, 2.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 0.0f, - 4.0f / 9.0f,
                                                                     8.0f / 9.0f, 2.0f / 9.0f, - 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, - 4.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, - 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, - 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, - 4.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, - 2.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 0.0f, - 2.0f / 9.0f,
                                                                     8.0f / 9.0f, 2.0f / 9.0f, - 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, - 2.0f / 9.0f, 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, - 8.0f / 9.0f, 0.0f,
                                                                     8.0f / 9.0f, - 6.0f / 9.0f, 0.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 0.0f, 8.0f / 9.0f, - 2.0f / 9.0f, 0.0f
                                                                     , 8.0f / 9.0f, 0.0f, 0.0f, 8.0f / 9.0f, 2.0f / 9.0f,
                                                                     0.0f, 8.0f / 9.0f, 4.0f / 9.0f, 0.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 0.0f, 8.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     8.0f / 9.0f, - 8.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 6.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     2.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                                                                     8.0f / 9.0f, 4.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     2.0f / 9.0f, 8.0f / 9.0f, - 8.0f / 9.0f, 4.0f / 9.0f,
                                                                     8.0f / 9.0f, - 6.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     4.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f, 4.0f / 9.0f,
                                                                     8.0f / 9.0f, 4.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     4.0f / 9.0f, 8.0f / 9.0f, - 8.0f / 9.0f, 6.0f / 9.0f,
                                                                     8.0f / 9.0f, - 6.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     6.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f, 6.0f / 9.0f,
                                                                     8.0f / 9.0f, 4.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 6.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 8.0f / 9.0f, - 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     8.0f / 9.0f, - 6.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 4.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     - 2.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f, 0.0f,
                                                                     8.0f / 9.0f, 8.0f / 9.0f, 2.0f / 9.0f, 8.0f / 9.0f,
                                                                     8.0f / 9.0f, 4.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     6.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f, 8.0f / 9.0f,
                                                                     8.0f / 9.0f, 8.0f / 9.0f
                                                                 };

            public static readonly float[] grouping_5bits = new[]
                                                                {
                                                                    - 2.0f / 3.0f, - 2.0f / 3.0f, - 2.0f / 3.0f, 0.0f,
                                                                    - 2.0f / 3.0f, - 2.0f / 3.0f, 2.0f / 3.0f,
                                                                    - 2.0f / 3.0f, - 2.0f / 3.0f, - 2.0f / 3.0f, 0.0f,
                                                                    - 2.0f / 3.0f, 0.0f, 0.0f, - 2.0f / 3.0f, 2.0f / 3.0f,
                                                                    0.0f, - 2.0f / 3.0f, - 2.0f / 3.0f, 2.0f / 3.0f,
                                                                    - 2.0f / 3.0f, 0.0f, 2.0f / 3.0f, - 2.0f / 3.0f,
                                                                    2.0f / 3.0f, 2.0f / 3.0f, - 2.0f / 3.0f, - 2.0f / 3.0f
                                                                    , - 2.0f / 3.0f, 0.0f, 0.0f, - 2.0f / 3.0f, 0.0f,
                                                                    2.0f / 3.0f, - 2.0f / 3.0f, 0.0f, - 2.0f / 3.0f, 0.0f,
                                                                    0.0f, 0.0f, 0.0f, 0.0f, 2.0f / 3.0f, 0.0f, 0.0f,
                                                                    - 2.0f / 3.0f, 2.0f / 3.0f, 0.0f, 0.0f, 2.0f / 3.0f,
                                                                    0.0f, 2.0f / 3.0f, 2.0f / 3.0f, 0.0f, - 2.0f / 3.0f,
                                                                    - 2.0f / 3.0f, 2.0f / 3.0f, 0.0f, - 2.0f / 3.0f,
                                                                    2.0f / 3.0f, 2.0f / 3.0f, - 2.0f / 3.0f, 2.0f / 3.0f,
                                                                    - 2.0f / 3.0f, 0.0f, 2.0f / 3.0f, 0.0f, 0.0f,
                                                                    2.0f / 3.0f, 2.0f / 3.0f, 0.0f, 2.0f / 3.0f,
                                                                    - 2.0f / 3.0f, 2.0f / 3.0f, 2.0f / 3.0f, 0.0f,
                                                                    2.0f / 3.0f, 2.0f / 3.0f, 2.0f / 3.0f, 2.0f / 3.0f,
                                                                    2.0f / 3.0f
                                                                };

            // this table contains 3 requantized samples for each legal codeword
            // when grouped in 7 bits, i.e. 5 quantizationsteps per sample
            //UPGRADE_NOTE: Final was removed from the declaration of 'grouping_7bits '. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1003"'
            public static readonly float[] grouping_7bits = new[]
                                                                {
                                                                    - 0.8f, - 0.8f, - 0.8f, - 0.4f, - 0.8f, - 0.8f, 0.0f,
                                                                    - 0.8f, - 0.8f, 0.4f, - 0.8f, - 0.8f, 0.8f, - 0.8f,
                                                                    - 0.8f, - 0.8f, - 0.4f, - 0.8f, - 0.4f, - 0.4f, - 0.8f
                                                                    , 0.0f, - 0.4f, - 0.8f, 0.4f, - 0.4f, - 0.8f, 0.8f,
                                                                    - 0.4f, - 0.8f, - 0.8f, 0.0f, - 0.8f, - 0.4f, 0.0f,
                                                                    - 0.8f, 0.0f, 0.0f, - 0.8f, 0.4f, 0.0f, - 0.8f, 0.8f,
                                                                    0.0f, - 0.8f, - 0.8f, 0.4f, - 0.8f, - 0.4f, 0.4f,
                                                                    - 0.8f, 0.0f, 0.4f, - 0.8f, 0.4f, 0.4f, - 0.8f, 0.8f,
                                                                    0.4f, - 0.8f, - 0.8f, 0.8f, - 0.8f, - 0.4f, 0.8f,
                                                                    - 0.8f, 0.0f, 0.8f, - 0.8f, 0.4f, 0.8f, - 0.8f, 0.8f,
                                                                    0.8f, - 0.8f, - 0.8f, - 0.8f, - 0.4f, - 0.4f, - 0.8f,
                                                                    - 0.4f, 0.0f, - 0.8f, - 0.4f, 0.4f, - 0.8f, - 0.4f,
                                                                    0.8f, - 0.8f, - 0.4f, - 0.8f, - 0.4f, - 0.4f, - 0.4f,
                                                                    - 0.4f, - 0.4f, 0.0f, - 0.4f, - 0.4f, 0.4f, - 0.4f,
                                                                    - 0.4f, 0.8f, - 0.4f, - 0.4f, - 0.8f, 0.0f, - 0.4f,
                                                                    - 0.4f, 0.0f, - 0.4f, 0.0f, 0.0f, - 0.4f, 0.4f, 0.0f,
                                                                    - 0.4f, 0.8f, 0.0f, - 0.4f, - 0.8f, 0.4f, - 0.4f,
                                                                    - 0.4f, 0.4f, - 0.4f, 0.0f, 0.4f, - 0.4f, 0.4f, 0.4f,
                                                                    - 0.4f, 0.8f, 0.4f, - 0.4f, - 0.8f, 0.8f, - 0.4f,
                                                                    - 0.4f, 0.8f, - 0.4f, 0.0f, 0.8f, - 0.4f, 0.4f, 0.8f,
                                                                    - 0.4f, 0.8f, 0.8f, - 0.4f, - 0.8f, - 0.8f, 0.0f,
                                                                    - 0.4f, - 0.8f, 0.0f, 0.0f, - 0.8f, 0.0f, 0.4f, - 0.8f
                                                                    , 0.0f, 0.8f, - 0.8f, 0.0f, - 0.8f, - 0.4f, 0.0f,
                                                                    - 0.4f, - 0.4f, 0.0f, 0.0f, - 0.4f, 0.0f, 0.4f, - 0.4f
                                                                    , 0.0f, 0.8f, - 0.4f, 0.0f, - 0.8f, 0.0f, 0.0f, - 0.4f
                                                                    , 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.4f, 0.0f, 0.0f, 0.8f
                                                                    , 0.0f, 0.0f, - 0.8f, 0.4f, 0.0f, - 0.4f, 0.4f, 0.0f,
                                                                    0.0f, 0.4f, 0.0f, 0.4f, 0.4f, 0.0f, 0.8f, 0.4f, 0.0f,
                                                                    - 0.8f, 0.8f, 0.0f, - 0.4f, 0.8f, 0.0f, 0.0f, 0.8f,
                                                                    0.0f, 0.4f, 0.8f, 0.0f, 0.8f, 0.8f, 0.0f, - 0.8f,
                                                                    - 0.8f, 0.4f, - 0.4f, - 0.8f, 0.4f, 0.0f, - 0.8f, 0.4f
                                                                    , 0.4f, - 0.8f, 0.4f, 0.8f, - 0.8f, 0.4f, - 0.8f,
                                                                    - 0.4f, 0.4f, - 0.4f, - 0.4f, 0.4f, 0.0f, - 0.4f, 0.4f
                                                                    , 0.4f, - 0.4f, 0.4f, 0.8f, - 0.4f, 0.4f, - 0.8f, 0.0f
                                                                    , 0.4f, - 0.4f, 0.0f, 0.4f, 0.0f, 0.0f, 0.4f, 0.4f,
                                                                    0.0f, 0.4f, 0.8f, 0.0f, 0.4f, - 0.8f, 0.4f, 0.4f,
                                                                    - 0.4f, 0.4f, 0.4f, 0.0f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f
                                                                    , 0.8f, 0.4f, 0.4f, - 0.8f, 0.8f, 0.4f, - 0.4f, 0.8f,
                                                                    0.4f, 0.0f, 0.8f, 0.4f, 0.4f, 0.8f, 0.4f, 0.8f, 0.8f,
                                                                    0.4f, - 0.8f, - 0.8f, 0.8f, - 0.4f, - 0.8f, 0.8f, 0.0f
                                                                    , - 0.8f, 0.8f, 0.4f, - 0.8f, 0.8f, 0.8f, - 0.8f, 0.8f
                                                                    , - 0.8f, - 0.4f, 0.8f, - 0.4f, - 0.4f, 0.8f, 0.0f,
                                                                    - 0.4f, 0.8f, 0.4f, - 0.4f, 0.8f, 0.8f, - 0.4f, 0.8f,
                                                                    - 0.8f, 0.0f, 0.8f, - 0.4f, 0.0f, 0.8f, 0.0f, 0.0f,
                                                                    0.8f, 0.4f, 0.0f, 0.8f, 0.8f, 0.0f, 0.8f, - 0.8f, 0.4f
                                                                    , 0.8f, - 0.4f, 0.4f, 0.8f, 0.0f, 0.4f, 0.8f, 0.4f,
                                                                    0.4f, 0.8f, 0.8f, 0.4f, 0.8f, - 0.8f, 0.8f, 0.8f,
                                                                    - 0.4f, 0.8f, 0.8f, 0.0f, 0.8f, 0.8f, 0.4f, 0.8f, 0.8f
                                                                    , 0.8f, 0.8f, 0.8f
                                                                };

            // this table contains 3 requantized samples for each legal codeword
            // when grouped in 10 bits, i.e. 9 quantizationsteps per sample

            public static readonly float[] table_ab1_c = new[]
                                                             {
                                                                 0.0f, 1.33333333333f, 1.14285714286f, 1.06666666666f,
                                                                 1.03225806452f, 1.01587301587f, 1.00787401575f,
                                                                 1.00392156863f, 1.00195694716f, 1.00097751711f,
                                                                 1.00048851979f, 1.00024420024f, 1.00012208522f,
                                                                 1.00006103888f, 1.00003051851f, 1.00001525902f
                                                             };

            public static readonly int[] table_ab1_codelength = new[]
                                                                    {
                                                                        0, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                                                        16
                                                                    };

            public static readonly float[] table_ab1_d = new[]
                                                             {
                                                                 0.0f, 0.50000000000f, 0.25000000000f, 0.12500000000f,
                                                                 0.06250000000f, 0.03125000000f, 0.01562500000f,
                                                                 0.00781250000f, 0.00390625000f, 0.00195312500f,
                                                                 0.00097656250f, 0.00048828125f, 0.00024414063f,
                                                                 0.00012207031f, 0.00006103516f, 0.00003051758f
                                                             };

            public static readonly float[] table_ab1_factor = new[]
                                                                  {
                                                                      0.0f, 1.0f / 2.0f, 1.0f / 4.0f, 1.0f / 8.0f,
                                                                      1.0f / 16.0f, 1.0f / 32.0f, 1.0f / 64.0f,
                                                                      1.0f / 128.0f, 1.0f / 256.0f, 1.0f / 512.0f,
                                                                      1.0f / 1024.0f, 1.0f / 2048.0f, 1.0f / 4096.0f,
                                                                      1.0f / 8192.0f, 1.0f / 16384.0f, 1.0f / 32768.0f
                                                                  };

            public static readonly float[][] table_ab1_groupingtables =
                {
                    null, grouping_5bits, null, null, null, null,
                    null, null, null, null, null, null, null, null
                    , null, null
                };

            // subbands 3-... tables 3-B.2a and 2b:
            //UPGRADE_NOTE: Final was removed from the declaration of 'table_ab234_groupingtables '. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1003"'
            public static readonly float[][] table_ab234_groupingtables =
                {
                    null, grouping_5bits, grouping_7bits, null,
                    grouping_10bits, null, null, null, null,
                    null, null, null, null, null, null, null
                };

            // subbands 3-10 in tables 3-B.2a and 2b:

            public static readonly float[] table_ab2_c = new[]
                                                             {
                                                                 0.0f, 1.33333333333f, 1.60000000000f, 1.14285714286f,
                                                                 1.77777777777f, 1.06666666666f, 1.03225806452f,
                                                                 1.01587301587f, 1.00787401575f, 1.00392156863f,
                                                                 1.00195694716f, 1.00097751711f, 1.00048851979f,
                                                                 1.00024420024f, 1.00012208522f, 1.00001525902f
                                                             };

            public static readonly int[] table_ab2_codelength = new[]
                                                                    {
                                                                        0, 5, 7, 3, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                                                                        16
                                                                    };

            public static readonly float[] table_ab2_d = new[]
                                                             {
                                                                 0.0f, 0.50000000000f, 0.50000000000f, 0.25000000000f,
                                                                 0.50000000000f, 0.12500000000f, 0.06250000000f,
                                                                 0.03125000000f, 0.01562500000f, 0.00781250000f,
                                                                 0.00390625000f, 0.00195312500f, 0.00097656250f,
                                                                 0.00048828125f, 0.00024414063f, 0.00003051758f
                                                             };

            public static readonly float[] table_ab2_factor = new[]
                                                                  {
                                                                      0.0f, 1.0f / 2.0f, 1.0f / 4.0f, 1.0f / 4.0f,
                                                                      1.0f / 8.0f, 1.0f / 8.0f, 1.0f / 16.0f, 1.0f / 32.0f
                                                                      , 1.0f / 64.0f, 1.0f / 128.0f, 1.0f / 256.0f,
                                                                      1.0f / 512.0f, 1.0f / 1024.0f, 1.0f / 2048.0f,
                                                                      1.0f / 4096.0f, 1.0f / 32768.0f
                                                                  };

            // subbands 11-22 in tables 3-B.2a and 2b:

            public static readonly float[] table_ab3_c = new[]
                                                             {
                                                                 0.0f, 1.33333333333f, 1.60000000000f, 1.14285714286f,
                                                                 1.77777777777f, 1.06666666666f, 1.03225806452f,
                                                                 1.00001525902f
                                                             };

            public static readonly int[] table_ab3_codelength = new[] { 0, 5, 7, 3, 10, 4, 5, 16 };

            public static readonly float[] table_ab3_d = new[]
                                                             {
                                                                 0.0f, 0.50000000000f, 0.50000000000f, 0.25000000000f,
                                                                 0.50000000000f, 0.12500000000f, 0.06250000000f,
                                                                 0.00003051758f
                                                             };

            public static readonly float[] table_ab3_factor = new[]
                                                                  {
                                                                      0.0f, 1.0f / 2.0f, 1.0f / 4.0f, 1.0f / 4.0f,
                                                                      1.0f / 8.0f, 1.0f / 8.0f, 1.0f / 16.0f,
                                                                      1.0f / 32768.0f
                                                                  };

            // subbands 23-... in tables 3-B.2a and 2b:

            public static readonly float[] table_ab4_c = new[] { 0.0f, 1.33333333333f, 1.60000000000f, 1.00001525902f };

            public static readonly int[] table_ab4_codelength = new[] { 0, 5, 7, 16 };

            public static readonly float[] table_ab4_d = new[] { 0.0f, 0.50000000000f, 0.50000000000f, 0.00003051758f };

            public static readonly float[] table_ab4_factor = new[] { 0.0f, 1.0f / 2.0f, 1.0f / 4.0f, 1.0f / 32768.0f };

            // subbands in tables 3-B.2c and 2d:

            public static readonly float[] table_cd_c = new[]
                                                            {
                                                                0.0f, 1.33333333333f, 1.60000000000f, 1.77777777777f,
                                                                1.06666666666f, 1.03225806452f, 1.01587301587f,
                                                                1.00787401575f, 1.00392156863f, 1.00195694716f,
                                                                1.00097751711f, 1.00048851979f, 1.00024420024f,
                                                                1.00012208522f, 1.00006103888f, 1.00003051851f
                                                            };

            public static readonly int[] table_cd_codelength = new[]
                                                                   {
                                                                       0, 5, 7, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
                                                                       15
                                                                   };

            public static readonly float[] table_cd_d = new[]
                                                            {
                                                                0.0f, 0.50000000000f, 0.50000000000f, 0.50000000000f,
                                                                0.12500000000f, 0.06250000000f, 0.03125000000f,
                                                                0.01562500000f, 0.00781250000f, 0.00390625000f,
                                                                0.00195312500f, 0.00097656250f, 0.00048828125f,
                                                                0.00024414063f, 0.00012207031f, 0.00006103516f
                                                            };

            public static readonly float[] table_cd_factor = new[]
                                                                 {
                                                                     0.0f, 1.0f / 2.0f, 1.0f / 4.0f, 1.0f / 8.0f,
                                                                     1.0f / 8.0f, 1.0f / 16.0f, 1.0f / 32.0f, 1.0f / 64.0f
                                                                     , 1.0f / 128.0f, 1.0f / 256.0f, 1.0f / 512.0f,
                                                                     1.0f / 1024.0f, 1.0f / 2048.0f, 1.0f / 4096.0f,
                                                                     1.0f / 8192.0f, 1.0f / 16384.0f
                                                                 };

            public static readonly float[][] table_cd_groupingtables =
                {
                    null, grouping_5bits, grouping_7bits,
                    grouping_10bits, null, null, null, null, null,
                    null, null, null, null, null, null, null
                };

            #endregion

            #region Fields

            protected internal int allocation;

            protected internal float[] c = new float[] { 0 };

            protected internal int[] codelength = new[] { 0 };

            protected internal float[] d = new float[] { 0 };

            //UPGRADE_NOTE: The initialization of  'groupingtable' was moved to method 'InitBlock'. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1005"'

            //protected float[][] 		groupingtable = {{0},{0}} ;
            protected internal float[] factor = new[] { 0.0f };

            protected internal float[][] groupingtable;

            protected internal int groupnumber;

            protected internal int samplenumber;

            //UPGRADE_NOTE: The initialization of  'samples' was moved to method 'InitBlock'. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1005"'
            protected internal float[] samples;

            protected internal float scalefactor1, scalefactor2, scalefactor3;

            protected internal int scfsi;

            protected internal int subbandnumber;

            #endregion

            #region Constructors and Destructors

            /// <summary>
            ///     Constructor
            /// </summary>
            public SubbandLayer2(int subbandnumber)
            {
                this.subbandnumber = subbandnumber;
                this.groupnumber = this.samplenumber = 0;
            }

            #endregion

            #region Public Methods and Operators

            /// <summary>
            ///     *
            /// </summary>
            public override bool put_next_sample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
            {
                if ((this.allocation != 0) && (channels != OutputChannels.RIGHT_CHANNEL))
                {
                    float sample = this.samples[this.samplenumber];

                    if (this.groupingtable[0] == null)
                    {
                        sample = (sample + this.d[0]) * this.c[0];
                    }
                    if (this.groupnumber <= 4)
                    {
                        sample *= this.scalefactor1;
                    }
                    else if (this.groupnumber <= 8)
                    {
                        sample *= this.scalefactor2;
                    }
                    else
                    {
                        sample *= this.scalefactor3;
                    }
                    filter1.input_sample(sample, this.subbandnumber);
                }

                if (++this.samplenumber == 3)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            /// <summary>
            ///     *
            /// </summary>
            public override void read_allocation(Bitstream stream, Header header, Crc16 crc)
            {
                int length = this.get_allocationlength(header);
                this.allocation = stream.GetBits(length);
                if (crc != null)
                {
                    crc.AddBits(this.allocation, length);
                }
            }

            /// <summary>
            ///     *
            /// </summary>
            public override bool read_sampledata(Bitstream stream)
            {
                if (this.allocation != 0)
                {
                    if (this.groupingtable[0] != null)
                    {
                        int samplecode = stream.GetBits(this.codelength[0]);
                        // create requantized samples:
                        samplecode += samplecode << 1;
                        float[] target = this.samples;
                        float[] source = this.groupingtable[0];
                        /*
						int tmp = 0;
						int temp = 0;
						target[tmp++] = source[samplecode + temp];
						temp++;
						target[tmp++] = source[samplecode + temp];
						temp++;
						target[tmp] = source[samplecode + temp];
						*/
                        //Bugfix:
                        int tmp = 0;
                        int temp = samplecode;

                        if (temp > source.Length - 3)
                        {
                            temp = source.Length - 3;
                        }

                        target[tmp] = source[temp];
                        temp++;
                        tmp++;
                        target[tmp] = source[temp];
                        temp++;
                        tmp++;
                        target[tmp] = source[temp];

                        // memcpy (samples, groupingtable + samplecode, 3 * sizeof (real));
                    }
                    else
                    {
                        this.samples[0] = (float)((stream.GetBits(this.codelength[0])) * this.factor[0] - 1.0);
                        this.samples[1] = (float)((stream.GetBits(this.codelength[0])) * this.factor[0] - 1.0);
                        this.samples[2] = (float)((stream.GetBits(this.codelength[0])) * this.factor[0] - 1.0);
                    }
                }

                this.samplenumber = 0;
                if (++this.groupnumber == 12)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            /// <summary>
            ///     *
            /// </summary>
            public override void read_scalefactor(Bitstream stream, Header header)
            {
                if (this.allocation != 0)
                {
                    switch (this.scfsi)
                    {
                        case 0:
                            this.scalefactor1 = scalefactors[stream.GetBits(6)];
                            this.scalefactor2 = scalefactors[stream.GetBits(6)];
                            this.scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;

                        case 1:
                            this.scalefactor1 = this.scalefactor2 = scalefactors[stream.GetBits(6)];
                            this.scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;

                        case 2:
                            this.scalefactor1 = this.scalefactor2 = this.scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;

                        case 3:
                            this.scalefactor1 = scalefactors[stream.GetBits(6)];
                            this.scalefactor2 = this.scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;
                    }
                    this.prepare_sample_reading(
                        header, this.allocation, 0, this.factor, this.codelength, this.c, this.d);
                }
            }

            /// <summary>
            ///     *
            /// </summary>
            public virtual void read_scalefactor_selection(Bitstream stream, Crc16 crc)
            {
                if (this.allocation != 0)
                {
                    this.scfsi = stream.GetBits(2);
                    if (crc != null)
                    {
                        crc.AddBits(this.scfsi, 2);
                    }
                }
            }

            #endregion

            #region Methods

            /// <summary>
            ///     *
            /// </summary>
            protected internal virtual int get_allocationlength(Header header)
            {
                if (header.Version() == Header.Mpeg1)
                {
                    int channel_bitrate = header.BitrateIndex();

                    // calculate bitrate per channel:
                    if (header.Mode() != Header.SingleChannel)
                    {
                        if (channel_bitrate == 4)
                        {
                            channel_bitrate = 1;
                        }
                        else
                        {
                            channel_bitrate -= 4;
                        }
                    }

                    if (channel_bitrate == 1 || channel_bitrate == 2)
                    {
                        // table 3-B.2c or 3-B.2d
                        if (this.subbandnumber <= 1)
                        {
                            return 4;
                        }
                        else
                        {
                            return 3;
                        }
                    }
                        // tables 3-B.2a or 3-B.2b
                    else if (this.subbandnumber <= 10)
                    {
                        return 4;
                    }
                    else if (this.subbandnumber <= 22)
                    {
                        return 3;
                    }
                    else
                    {
                        return 2;
                    }
                }
                else
                {
                    // MPEG-2 LSF -- Jeff

                    // table B.1 of ISO/IEC 13818-3
                    if (this.subbandnumber <= 3)
                    {
                        return 4;
                    }
                    else if (this.subbandnumber <= 10)
                    {
                        return 3;
                    }
                    else
                    {
                        return 2;
                    }
                }
            }

            /// <summary>
            ///     *
            /// </summary>
            protected internal virtual void prepare_sample_reading(
                Header header, int allocation, int channel, float[] factor, int[] codelength, float[] c, float[] d)
            {
                int channel_bitrate = header.BitrateIndex();
                // calculate bitrate per channel:
                if (header.Mode() != Header.SingleChannel)
                {
                    if (channel_bitrate == 4)
                    {
                        channel_bitrate = 1;
                    }
                    else
                    {
                        channel_bitrate -= 4;
                    }
                }

                if (channel_bitrate == 1 || channel_bitrate == 2)
                {
                    // table 3-B.2c or 3-B.2d
                    this.groupingtable[channel] = table_cd_groupingtables[allocation];
                    factor[0] = table_cd_factor[allocation];
                    codelength[0] = table_cd_codelength[allocation];
                    c[0] = table_cd_c[allocation];
                    d[0] = table_cd_d[allocation];
                }
                else
                {
                    // tables 3-B.2a or 3-B.2b
                    if (this.subbandnumber <= 2)
                    {
                        this.groupingtable[channel] = table_ab1_groupingtables[allocation];
                        factor[0] = table_ab1_factor[allocation];
                        codelength[0] = table_ab1_codelength[allocation];
                        c[0] = table_ab1_c[allocation];
                        d[0] = table_ab1_d[allocation];
                    }
                    else
                    {
                        this.groupingtable[channel] = table_ab234_groupingtables[allocation];
                        if (this.subbandnumber <= 10)
                        {
                            factor[0] = table_ab2_factor[allocation];
                            codelength[0] = table_ab2_codelength[allocation];
                            c[0] = table_ab2_c[allocation];
                            d[0] = table_ab2_d[allocation];
                        }
                        else if (this.subbandnumber <= 22)
                        {
                            factor[0] = table_ab3_factor[allocation];
                            codelength[0] = table_ab3_codelength[allocation];
                            c[0] = table_ab3_c[allocation];
                            d[0] = table_ab3_d[allocation];
                        }
                        else
                        {
                            factor[0] = table_ab4_factor[allocation];
                            codelength[0] = table_ab4_codelength[allocation];
                            c[0] = table_ab4_c[allocation];
                            d[0] = table_ab4_d[allocation];
                        }
                    }
                }
            }

            private void InitBlock()
            {
                this.samples = new float[3];
                this.groupingtable = new float[2][];
            }

            #endregion

            // this table contains 3 requantized samples for each legal codeword
            // when grouped in 5 bits, i.e. 3 quantization steps per sample
            //UPGRADE_NOTE: Final was removed from the declaration of 'grouping_5bits '. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1003"'
        }

        /// <summary>
        ///     Class for layer II subbands in joint stereo mode.
        /// </summary>
        internal class SubbandLayer2IntensityStereo : SubbandLayer2
        {
            #region Fields

            protected internal float channel2_scalefactor1, channel2_scalefactor2, channel2_scalefactor3;

            protected internal int channel2_scfsi;

            #endregion

            #region Constructors and Destructors

            /// <summary>
            ///     Constructor
            /// </summary>
            public SubbandLayer2IntensityStereo(int subbandnumber)
                : base(subbandnumber)
            {
            }

            #endregion

            #region Public Methods and Operators

            /// <summary>
            ///     *
            /// </summary>
            public override bool put_next_sample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
            {
                if (this.allocation != 0)
                {
                    float sample = this.samples[this.samplenumber];

                    if (this.groupingtable[0] == null)
                    {
                        sample = (sample + this.d[0]) * this.c[0];
                    }
                    if (channels == OutputChannels.BOTH_CHANNELS)
                    {
                        float sample2 = sample;
                        if (this.groupnumber <= 4)
                        {
                            sample *= this.scalefactor1;
                            sample2 *= this.channel2_scalefactor1;
                        }
                        else if (this.groupnumber <= 8)
                        {
                            sample *= this.scalefactor2;
                            sample2 *= this.channel2_scalefactor2;
                        }
                        else
                        {
                            sample *= this.scalefactor3;
                            sample2 *= this.channel2_scalefactor3;
                        }
                        filter1.input_sample(sample, this.subbandnumber);
                        filter2.input_sample(sample2, this.subbandnumber);
                    }
                    else if (channels == OutputChannels.LEFT_CHANNEL)
                    {
                        if (this.groupnumber <= 4)
                        {
                            sample *= this.scalefactor1;
                        }
                        else if (this.groupnumber <= 8)
                        {
                            sample *= this.scalefactor2;
                        }
                        else
                        {
                            sample *= this.scalefactor3;
                        }
                        filter1.input_sample(sample, this.subbandnumber);
                    }
                    else
                    {
                        if (this.groupnumber <= 4)
                        {
                            sample *= this.channel2_scalefactor1;
                        }
                        else if (this.groupnumber <= 8)
                        {
                            sample *= this.channel2_scalefactor2;
                        }
                        else
                        {
                            sample *= this.channel2_scalefactor3;
                        }
                        filter1.input_sample(sample, this.subbandnumber);
                    }
                }

                if (++this.samplenumber == 3)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            /// <summary>
            ///     *
            /// </summary>
            public override void read_allocation(Bitstream stream, Header header, Crc16 crc)
            {
                base.read_allocation(stream, header, crc);
            }

            /// <summary>
            ///     *
            /// </summary>
            public override bool read_sampledata(Bitstream stream)
            {
                return base.read_sampledata(stream);
            }

            /// <summary>
            ///     *
            /// </summary>
            public override void read_scalefactor(Bitstream stream, Header header)
            {
                if (this.allocation != 0)
                {
                    base.read_scalefactor(stream, header);
                    switch (this.channel2_scfsi)
                    {
                        case 0:
                            this.channel2_scalefactor1 = scalefactors[stream.GetBits(6)];
                            this.channel2_scalefactor2 = scalefactors[stream.GetBits(6)];
                            this.channel2_scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;

                        case 1:
                            this.channel2_scalefactor1 = this.channel2_scalefactor2 = scalefactors[stream.GetBits(6)];
                            this.channel2_scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;

                        case 2:
                            this.channel2_scalefactor1 =
                                this.channel2_scalefactor2 =
                                this.channel2_scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;

                        case 3:
                            this.channel2_scalefactor1 = scalefactors[stream.GetBits(6)];
                            this.channel2_scalefactor2 = this.channel2_scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;
                    }
                }
            }

            /// <summary>
            ///     *
            /// </summary>
            public override void read_scalefactor_selection(Bitstream stream, Crc16 crc)
            {
                if (this.allocation != 0)
                {
                    this.scfsi = stream.GetBits(2);
                    this.channel2_scfsi = stream.GetBits(2);
                    if (crc != null)
                    {
                        crc.AddBits(this.scfsi, 2);
                        crc.AddBits(this.channel2_scfsi, 2);
                    }
                }
            }

            #endregion
        }

        /// <summary>
        ///     Class for layer II subbands in stereo mode.
        /// </summary>
        internal class SubbandLayer2Stereo : SubbandLayer2
        {
            #region Fields

            protected internal int channel2_allocation;

            protected internal float[] channel2_c = new float[] { 0 };

            //protected boolean	 	channel2_grouping;  ???? Never used!
            protected internal int[] channel2_codelength = new[] { 0 };

            protected internal float[] channel2_d = new float[] { 0 };

            //protected float[][] 	channel2_groupingtable = {{0},{0}};
            protected internal float[] channel2_factor = new float[] { 0 };

            protected internal float[] channel2_samples;

            protected internal float channel2_scalefactor1, channel2_scalefactor2, channel2_scalefactor3;

            protected internal int channel2_scfsi;

            #endregion

            #region Constructors and Destructors

            /// <summary>
            ///     Constructor
            /// </summary>
            public SubbandLayer2Stereo(int subbandnumber)
                : base(subbandnumber)
            {
                this.channel2_samples = new float[3];
            }

            #endregion

            #region Public Methods and Operators

            /// <summary>
            ///     *
            /// </summary>
            public override bool put_next_sample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
            {
                bool returnvalue = base.put_next_sample(channels, filter1, filter2);
                if ((this.channel2_allocation != 0) && (channels != OutputChannels.LEFT_CHANNEL))
                {
                    float sample = this.channel2_samples[this.samplenumber - 1];

                    if (this.groupingtable[1] == null)
                    {
                        sample = (sample + this.channel2_d[0]) * this.channel2_c[0];
                    }

                    if (this.groupnumber <= 4)
                    {
                        sample *= this.channel2_scalefactor1;
                    }
                    else if (this.groupnumber <= 8)
                    {
                        sample *= this.channel2_scalefactor2;
                    }
                    else
                    {
                        sample *= this.channel2_scalefactor3;
                    }
                    if (channels == OutputChannels.BOTH_CHANNELS)
                    {
                        filter2.input_sample(sample, this.subbandnumber);
                    }
                    else
                    {
                        filter1.input_sample(sample, this.subbandnumber);
                    }
                }
                return returnvalue;
            }

            /// <summary>
            ///     *
            /// </summary>
            public override void read_allocation(Bitstream stream, Header header, Crc16 crc)
            {
                int length = this.get_allocationlength(header);
                this.allocation = stream.GetBits(length);
                this.channel2_allocation = stream.GetBits(length);
                if (crc != null)
                {
                    crc.AddBits(this.allocation, length);
                    crc.AddBits(this.channel2_allocation, length);
                }
            }

            /// <summary>
            ///     *
            /// </summary>
            public override bool read_sampledata(Bitstream stream)
            {
                bool returnvalue = base.read_sampledata(stream);

                if (this.channel2_allocation != 0)
                {
                    if (this.groupingtable[1] != null)
                    {
                        int samplecode = stream.GetBits(this.channel2_codelength[0]);
                        // create requantized samples:
                        samplecode += samplecode << 1;
                        /*
						float[] target = channel2_samples;
						float[] source = channel2_groupingtable[0];
						int tmp = 0;
						int temp = 0;
						target[tmp++] = source[samplecode + temp];
						temp++;
						target[tmp++] = source[samplecode + temp];
						temp++;
						target[tmp] = source[samplecode + temp];
						// memcpy (channel2_samples, channel2_groupingtable + samplecode, 3 * sizeof (real));
						*/
                        float[] target = this.channel2_samples;
                        float[] source = this.groupingtable[1];
                        int tmp = 0;
                        int temp = samplecode;
                        target[tmp] = source[temp];
                        temp++;
                        tmp++;
                        target[tmp] = source[temp];
                        temp++;
                        tmp++;
                        target[tmp] = source[temp];
                    }
                    else
                    {
                        this.channel2_samples[0] =
                            (float)((stream.GetBits(this.channel2_codelength[0])) * this.channel2_factor[0] - 1.0);
                        this.channel2_samples[1] =
                            (float)((stream.GetBits(this.channel2_codelength[0])) * this.channel2_factor[0] - 1.0);
                        this.channel2_samples[2] =
                            (float)((stream.GetBits(this.channel2_codelength[0])) * this.channel2_factor[0] - 1.0);
                    }
                }
                return returnvalue;
            }

            /// <summary>
            ///     *
            /// </summary>
            public override void read_scalefactor(Bitstream stream, Header header)
            {
                base.read_scalefactor(stream, header);
                if (this.channel2_allocation != 0)
                {
                    switch (this.channel2_scfsi)
                    {
                        case 0:
                            this.channel2_scalefactor1 = scalefactors[stream.GetBits(6)];
                            this.channel2_scalefactor2 = scalefactors[stream.GetBits(6)];
                            this.channel2_scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;

                        case 1:
                            this.channel2_scalefactor1 = this.channel2_scalefactor2 = scalefactors[stream.GetBits(6)];
                            this.channel2_scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;

                        case 2:
                            this.channel2_scalefactor1 =
                                this.channel2_scalefactor2 =
                                this.channel2_scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;

                        case 3:
                            this.channel2_scalefactor1 = scalefactors[stream.GetBits(6)];
                            this.channel2_scalefactor2 = this.channel2_scalefactor3 = scalefactors[stream.GetBits(6)];
                            break;
                    }
                    this.prepare_sample_reading(
                        header,
                        this.channel2_allocation,
                        1,
                        this.channel2_factor,
                        this.channel2_codelength,
                        this.channel2_c,
                        this.channel2_d);
                }
            }

            /// <summary>
            ///     *
            /// </summary>
            public override void read_scalefactor_selection(Bitstream stream, Crc16 crc)
            {
                if (this.allocation != 0)
                {
                    this.scfsi = stream.GetBits(2);
                    if (crc != null)
                    {
                        crc.AddBits(this.scfsi, 2);
                    }
                }
                if (this.channel2_allocation != 0)
                {
                    this.channel2_scfsi = stream.GetBits(2);
                    if (crc != null)
                    {
                        crc.AddBits(this.channel2_scfsi, 2);
                    }
                }
            }

            #endregion
        }
    }
}